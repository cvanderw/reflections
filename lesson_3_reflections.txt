When would you want to use a remote repository rather than keeping all your work local?

Having a remote repository is helpful for a number of reasons:
- A remote repo allows for easier sharing and collaboration with others.
- A remote provides a backup in case local work is lost.
- Even if you never decide to work with others, a remote repo still has the benefit of
  allowing you to pull down the changes on a different computer to continue work there.



Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

By requiring manual pulls users are free to keep their repositories isolated
and independent from each other. Git seems to encourage branching for feature
development. However, it's not always necessary to have access to every single
branch nor to track every single change. By having users manually pull changes
they are free to decide what to include and what not to.



Describe the differences between forks, clones, and branches. When would you
use one instead of another?

Branches: Divergent commits with their own history within a given repository.
You'd want to use branches when you're working within a given repository but
wish to try out new functionality or diverge from the main branch at any point
in time.

Clones: Copies of repositories in different locations. For instance, a
repository on GitHub can be cloned to a user's local machine or even to
another repository on GitHub. A repository on a different machine (that is not
on GitHub) can also be cloned to yet other machines. Apparently it's also
possible to clone on your own machine. Cloning is about making copies of
repositories. You'd want to use clones when there's a need to work on a copy
of the repository in a different location; that is, your interest is in
working on any of the branches with the repository.

Forks: Clones within GitHub. One may wish to clone a GitHub repository onto a
different GitHub account. Forking is a convenient way to achieve this. You'd
want to fork a repository if it's already on GitHub and you're planning to
clone it to a different GitHub account; perhaps you have no interest in
merging changes back to the original repository because you want to use the
existing codebase as a baseline upon which you'll make further changes that
are different to the direction of the existing codebase you forked.



What is the benefit of having a copy of the last known state of the remote
stored locally?

If you have a copy of the last known state of the remote stored locally then
that allows you to work offline. When you are online you can push/pull as
needed to have the local version of the remote updated. If/when you're offline
your changes done to the local master branch can be (efficiently) compared to
the local version of the remote to infer how much you're potentially ahead or
behind. When you end up actually trying to push/pull this might be out-of-date
but the local copy affords you the ability to easily work offline without the
strict requirement of being connected to the repository at all times. In fact,
the presence of a local copy of the remote seems to emphasize the fact that
Git is intended to be entirely decentralized unlike many other version control
systems.



How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

Without using Git I'd probably use a different version control system
(previously I had used Subversion but I suppose these days another option is
Mercurial). I have a hard time imagining working on a project with other
developers where we don't use version control. Git is lightweight and doesn't
require network access in order to do merging or a lot of other typical
version control work and so using a different version control system would be
less enjoyable/convenient compared to Git in that respect (of course, if the
other system is also a distributed management system then the benefits will be
similar). If our team chose to not use any version control system then we'd
have a really hard time to get things done. It's hard to come up with benefits
of choosing to not use Git. I suppose one benefit is that there's one less
thing to learn. Using Git is great but everyone needs to be familiar with it
in order to get value from the tool.

The other question is how I would get work done without GitHub; here I imagine
the assumption is that our team is using Git but just not GitHub. This is fine
since no one is required to use GitHub when using Git. GitHub provides the
benefit of hosting the code/resources for us (provided repository is public or
we're paying) and it provides a convenient web-based interface for everyone
to work with the code. So all of those things are clearly benefits of using
GitHub (over potentially rolling our own solution). Another neat thing about
GitHub is that since so many projects exist there it's easy to share your
project with others and benefit by reusing or learning from other projects. If
we chose not to use GitHub we'd have to run our own servers hosting the source
code (assuming we want a back up copy of the source).



When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

If you're working on clearly separate feature then a different branch makes
sense (we saw examples of this earlier in the asteroids game where easy modes
and coin branches were created). Another reason to have different branches is
for the use of pull requests: by isolating the changes into different branches
(off of master), the changes that are made can be viewed (and even updated) in
isolation without affecting the master changes. These changes can be updated
separately and then finally aproved and merged into master.

On the other hand, working entirely within master does have the benefit of not
needing to worry about all this additional merge complexity (having to resolve
conflicts, figure where to merge changes, etc.).
