What happens when you initialize a repository? Why do you need to do it?

Initializing a repository is necessary for creating the .git folder and
metadata for tracking the Git repository. Without this step, it's not possible
for Git to provide repository management since there isn't anything to support
the history and files related to the repository. From what I saw it looks like
this is largely a collection of text files so I suppose some of this can be
created by hand (although that sounds ugly) but if there are any binary files
created for tracking by Git then this is not going to work.



How is the staging area different from the working directory and the
repository? What value do you think it offers?

The staging area serves the purpose of organizing the subset of files/changes
to include in a single commit. It's not always the case that you wish to
commit all changes at once or even only one file/change at once. It's possible
that you've made a series of changes but wish to separate them out into
distinct logical commits. Organizing these into the staging area provides a
convenience as it gives you the opportunity to organize as you wish without
imposing a particular working style.
- Git repository: Collection of all changes/commits/history for the project.
- Working directory: Single checkout of the project; where you make changes.
- Staging area: a file that describes what will go into the next commit.
For more details read:
https://git-scm.com/book/en/v2/Getting-Started-Git-Basics.



How can you use the staging area to make sure you have one commit per logical
change?

Inspecting the difference between the repository and what's in your staging
area will help with ensuring you have one commit per logical change. That is,
running "git diff --staged" will show the difference between what's in the
repository (latest changes there) and the staging area (the reflection of the
next set of changes to be committed). `git status` will also be helpful in
seeing what set of files are included in the staging area.



What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

Branches would be very helpful when I want to try out experimental changes but
still keep track of the history of those changes. The example in the course is
a reasonable, albeit simplistic, example of such a need. The desire there was
to create an "easy" version of the game and the initial approach was to reduce
the number of rocks created. It could be that other aspects of the game could
benefit from being made easier and some simple experimentation would be in
order to verify what's best. Of course, while making these changes there's no
reason to lose the benefits of version control but you also don't want to make
changes directly into the main line code just yet. Therefore branching is
useful. If the idea turns out to have little merit the entire branch can be
dropped with no negative impact. If the ideas are solid they can be remerged
into the mainline (master) branch.
Yet another example of branches is keeping track of multiple competing
implementation strategies with the same code. Keeping track of these changes
in a sequential mainline branch would be impractical.




How do the diagrams help you visualize the branch structure?

Drawing out the branch structure helps visualize:
- How the branches relate to each other. In particular, you can see which
  branches build on features from previous branches and which branches have
  commits/functionality not found in other branches.
- Visualization helps also identify dead-end branches from which you cannot get
  back to easily unless you know the commit ID.



What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged together the changes from one branch are recorded
into the destination branch. The result is that all of those commits are now
accessible via the destination branch. It is now safe to delete the branch
those commits came from. Deleting the branch does not delete the changes,
rather it simply deletes the label applied to that branch. I can only assume
that by "why do we reprsent it in the diagram the way we do" the question is
referring to the way the branches were visualized in the Udacity course
https://classroom.udacity.com/courses/ud775 where the coins and master
branches were visualized as coming together to form a new node that has both
branches as parents of that new node. Such a visualization has value in that
it reinforces that the disparate history is not lost even though a single
branch is the result of the merge. For example, running "git log --graph"
will still show the differences that took place and help visualize the
different commit parents that are not obvious by a single "git log" command.



What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Doing merges manually all the time:

Pros:
- You avoid any of the surprising bugs that could result from Git trying to be
  too smart and merging for you.

Cons:
- Pain up the ass to keep doing things manually, especially for super simple
  and obvious merges.
